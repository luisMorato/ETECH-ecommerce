generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//ToDo: Add Chat Relation to User's Table
//ToDo: Separate Address | houseNumber | City | State | Country | postalCode in Another Table
model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  image       String?
  password    String
  role        String   @default("USER")
  phoneNumber String?
  address     String?
  houseNumber Int?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  createdAt   DateTime @default(now())
  updateddAt  DateTime @default(now())

  comments   Comment[]
  cart       Cart?
  //chat        Chat?
  creditCard CreditCard?
}

//ToDo: Make the relation with Order's table
model CreditCard {
  id        Int    @id @default(autoincrement())
  userId    Int
  //orderId     Int
  number    String
  bank      String
  expiresAt String
  cardCode  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  //order       Order   @relation(fields: [orderId], references: [id])
  //@@unique([orderId])

  @@unique([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  text      String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt  DateTime @default(now())
  updateddAt DateTime @default(now())

  cartProducts CartProducts[]
  order        Order[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model CartProducts {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int?
  createdAt  DateTime @default(now())
  updateddAt DateTime @default(now())

  products Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart     Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model Order {
  id            Int      @id @default(autoincrement())
  cartId        Int
  date          DateTime @default(now())
  status        String   @default("Processing Order")
  trackingCode  String   @default(cuid())
  paymentMethod String
  createdAt     DateTime @default(now())
  updateddAt    DateTime @default(now())

  cart         Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade)
  orderDetails OrderDetail?

  //creditCard    CreditCard?
}

model OrderDetail {
  id      Int @id @default(autoincrement())
  orderId Int

  order        Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderProduct OrderProduct[]

  @@unique([orderId])
}

model OrderProduct {
  id            Int      @id @default(autoincrement())
  productId     Int
  orderDetailId Int
  quantity      Int
  createdAt     DateTime @default(now())
  updateddAt    DateTime @default(now())

  products    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderDetail OrderDetail @relation(fields: [orderDetailId], references: [id], onDelete: Cascade)
}

//ToDo: Add Freight to Products Table
model Product {
  id            Int      @id @default(autoincrement())
  images        String[]
  name          String
  price         Float
  desc          String[]
  stock         Int
  brand         String
  //freight       Float?
  categoryId    Int
  subCategoryId Int
  createdAt     DateTime @default(now())

  cartProducts  CartProducts[]
  orderProduct  OrderProduct[]
  comment       Comment[]
  categories    ProductCategory    @relation(fields: [categoryId], references: [id])
  subCategories productSubCategory @relation(fields: [subCategoryId], references: [id])
}

model ProductCategory {
  id   Int    @id @default(autoincrement())
  name String

  products      Product[]
  subCategories productSubCategory[]
}

model productSubCategory {
  id         Int    @id @default(autoincrement())
  categoryId Int
  name       String

  products   Product[]
  categories ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

//ToDo: Create chat and message tables
// model Chat {
//   id        Int     @default(autoincrement())   @id
//   userId    Int
//   messages  Message[]

//   user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId])
// }

// model Message {
//   id        Int     @default(autoincrement())   @id
//   chatId    Int

//   chat      Chat    @relation(fields: [chatId], references: [id])
// }
