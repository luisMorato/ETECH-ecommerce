generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

//ToDo: Create Credit Card Table and make the relation with the user
//ToDo: Add createdAt and updateddAt Fields to User's Table
//ToDo: Add Chat Relation to User
model User {
  id          Int     @default(autoincrement())  @id
  name        String
  email       String  @unique
  image       String?
  password    String
  role        String  @default("USER")
  phoneNumber String?
  address     String?
  houseNumber Int?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  // createdAt   DateTime @default(now())
  // updateddAt   DateTime @default(now())

  comments    Comment[]
  cart        Cart?   
  //chat        Chat?
  //creditCard  CreditCard?
}

//ToDo: Create Credit Card Table 
// model CreditCard {
//   id          Int     @default(autoincrement())  @id
//   userId      Int
//   number      String
//   Bank        String
//   expiresAt   DateTime

//   user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId])
// }

model Comment {
  id        Int     @default(autoincrement()) @id
  userId    Int
  productId Int
  text      String

  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//ToDo: Add createdAt and updateddAt to Cart's Table
//ToDo: Add Multiple Orders to Cart's Table
model Cart {
  id            Int    @default(autoincrement())  @id
  userId        Int

  cartProducts  CartProducts[]
  order         Order?  
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//Add "onDelete: Cascade" to Products Field
model CartProducts {
  id            Int      @default(autoincrement())  @id
  cartId        Int
  productId     Int
  orderDetailId Int?
  quantity      Int?

  products      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart          Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  orderDetail   OrderDetail?   @relation(fields: [orderDetailId], references: [id])
}

//ToDo: Add createdAt and updateddAt to Order's Table
//ToDo: Add Payment Method to Order's Table
model Order {
  id              Int       @default(autoincrement())  @id
  cartId          Int
  date            DateTime  @default(now())
  status          String    @default("Processing Order")
  trackingCode    String    @default(cuid())
  //paymentMethod   String    @defailt("credit Card")
  // createdAt   DateTime @default(now())
  // updateddAt   DateTime @default(now())

  cart          Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  orderDetails  OrderDetail?
  @@unique([cartId])
}

model OrderDetail {
  id            Int    @default(autoincrement())  @id
  orderId       Int

  cartProducts  CartProducts[]
  order         Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId])
}

//ToDo: Add createdAt to Products Table
//ToDo: Add Brand to Products Table
//ToDo: Change the Field Image to be Images
model Product {
  id              Int    @default(autoincrement())  @id
  image           String[]
  name            String
  price           Float
  desc            String[]
  stock           Int
  //Brand           String
  categoryId      Int
  subCategoryId   Int
  //createdAt       DateTime @default(now())

  cartProducts    CartProducts[]
  comment         Comment[]
  categories      ProductCategory   @relation(fields: [categoryId], references: [id])
  subCategories   productSubCategory   @relation(fields: [subCategoryId], references: [id])
}

model ProductCategory {
  id              Int         @default(autoincrement())  @id
  name            String

  products        Product[]
  subCategories   productSubCategory[]
}

model productSubCategory {
  id          Int         @default(autoincrement())  @id
  categoryId  Int
  name        String

  products        Product[]
  categories  ProductCategory @relation(fields: [categoryId], references: [id])
}

//ToDo: Create chat and message tables
// model Chat {
//   id        Int     @default(autoincrement())   @id
//   userId    Int
//   messages  Message[]

//   user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
//   @@unique([userId])
// }

// model Message {
//   id        Int     @default(autoincrement())   @id
//   chatId    Int

//   chat      Chat    @relation(fields: [chatId], references: [id])
// }